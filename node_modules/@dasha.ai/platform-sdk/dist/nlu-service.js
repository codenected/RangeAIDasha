"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NluServiceCreationRequest = void 0;
const rxjs = __importStar(require("rxjs"));
const nlu_service_pb_1 = require("./generated/nlu-service_pb");
const errors_1 = require("./errors");
const logger = __importStar(require("./logger"));
class NluService {
    constructor(client, information = {}) {
        this.closed = false;
        this.client = client;
        this.information = information;
    }
    parse(request) {
        return new Promise((resolve, reject) => {
            this.client.recognize(request, (error, response) => {
                if (error) {
                    reject(errors_1.DashaSdkError.fromGrpcServiceError(error));
                    return;
                }
                resolve(response);
            });
        });
    }
    async recognize(skills, language, text) {
        return logger.catchErrorsAsync(logger.create(), async () => {
            if (this.closed) {
                throw new errors_1.DashaSdkError(`NLU service has been closed`);
            }
            const textNluServiceRequest = new nlu_service_pb_1.TextNluServiceRequest();
            textNluServiceRequest.setSkillsList(skills);
            textNluServiceRequest.setLanguage(language);
            textNluServiceRequest.setText(text);
            const response = await this.parse(textNluServiceRequest);
            const responseAsObject = response.toObject();
            return NluService.convertToNluFact(responseAsObject);
        });
    }
    static convertToNluFact(responseAsObject) {
        const result = responseAsObject.recognitionsList.map((x) => {
            if (x.datarecognition !== undefined) {
                return {
                    type: "data",
                    skill: x.datarecognition.skill,
                    data: Object.fromEntries(x.datarecognition.dataMap),
                    dataName: x.datarecognition.dataName,
                };
            }
            if (x.intentrecognition !== undefined) {
                return {
                    type: "intent",
                    skill: x.intentrecognition.skill,
                    sentenceType: x.intentrecognition.sentencetype,
                    state: x.intentrecognition.state,
                    intent: x.intentrecognition.intent,
                };
            }
            throw new errors_1.DashaSdkError(`Unknown NLU response type`);
        });
        return result;
    }
    close() {
        return logger.catchErrors(logger.create(), () => {
            if (this.closed) {
                return;
            }
            this.closed = true;
            this.client.close();
        });
    }
}
/** @internal */
class NluServiceCreationRequest {
    /** @internal */
    constructor(client, customIntents) {
        this._progressPercent = new rxjs.Subject();
        this.progressPercent = this._progressPercent.asObservable();
        const streamInit = new nlu_service_pb_1.NluServiceInitializeRequest();
        streamInit.setCustomIntents(NluServiceCreationRequest.convertCustomIntents(customIntents));
        const stream = client.initialize(streamInit);
        this.result = new Promise((resolve, reject) => {
            stream.on("error", async (error) => {
                const sdkError = errors_1.DashaSdkError.fromGrpcServiceError(error);
                this._progressPercent.error(sdkError);
                stream.removeAllListeners();
                stream.destroy();
                reject(sdkError);
            });
            stream.on("data", async (message) => {
                const { processing, failed, ready } = message.toObject();
                if (failed !== undefined) {
                    const sdkError = new errors_1.DashaSdkError(failed.reason);
                    this._progressPercent.error(sdkError);
                    stream.removeAllListeners();
                    stream.destroy();
                    reject(sdkError);
                    return;
                }
                if (processing !== undefined) {
                    this._progressPercent.next(processing.percent);
                    return;
                }
                if (ready !== undefined) {
                    const nluServiceInfo = JSON.parse(ready.json);
                    this._progressPercent.complete();
                    stream.removeAllListeners();
                    stream.destroy();
                    resolve(new NluService(client, nluServiceInfo));
                    return;
                }
                // unreachable
            });
        });
    }
    static convertCustomIntents(customIntents) {
        if (customIntents === undefined) {
            return undefined;
        }
        if (Object.keys(customIntents.excludes).length < 1 && Object.keys(customIntents.includes).length < 2) {
            throw new errors_1.DashaSdkError(`Please specify either at least two entries in customIntents.includes, ` +
                `or at least one in customIntents.excludes`);
        }
        const nluServiceCustomIntents = new nlu_service_pb_1.NluServiceCustomIntents();
        const excludesMap = nluServiceCustomIntents.getExcludesMap();
        const includesMap = nluServiceCustomIntents.getIncludesMap();
        for (const [key, value] of Object.entries(customIntents.excludes)) {
            const list = new nlu_service_pb_1.ListOfString();
            list.setValuesList(value);
            excludesMap.set(key, list);
        }
        for (const [key, value] of Object.entries(customIntents.includes)) {
            const list = new nlu_service_pb_1.ListOfString();
            list.setValuesList(value);
            includesMap.set(key, list);
        }
        nluServiceCustomIntents.setLanguage(customIntents.language);
        return nluServiceCustomIntents;
    }
}
exports.NluServiceCreationRequest = NluServiceCreationRequest;
//# sourceMappingURL=nlu-service.js.map