import { VoiceInfo } from "./sdk";
/**
 * Transport and protocol settings used by the application.
 */
export declare type SessionConfig = TextSessionConfig | AudioSessionConfig;
/**
 * Configuration for the text communication mode.
 *
 * @todo: add link
 */
export declare type TextSessionConfig = {
    type: "text";
    /**
     * Allows you to save a log on the server side. It is used to enable profiling.
     *
     * @default true
     */
    saveLog?: boolean;
};
/**
 * Configuration for the voice communitaion mode.
 *
 * @todo: add link
 */
export declare type AudioSessionConfig = {
    type: "audio";
    /**
     * Audio channel configuration.
     *
     * @default
     * ```ts
     * {
     *  type: "sip",
     *  configName: "default"
     * }
     * ```
     */
    channel?: AudioChannelConfig;
    /**
     * Speech-to-text configuration.
     */
    stt: SpeechToTextConfig;
    /**
     * Text-to-speech configuration.
     */
    tts: TextToSpeechConfig;
    /**
     * Voice activity detection configuration.
     */
    vad?: VoiceActivityDetectionConfig;
    /**
     * Volume multiplier of the background noise applied to the AI audio track
     * relative to the audio track.
     *
     * @remarks
     * Recommended value 0.1-0.3
     *
     * @default 0.5
     */
    noiseVolume?: number;
    /**
     * Allows you to save a log on the server side. It is used to enable profiling.
     *
     * @default true
     */
    saveLog?: boolean;
};
/**
 * Audio channel configuration.
 *
 * @example
 * ```ts
 * //Predefined config for audio channel
 * let audioConfig = {
 *  type: "sip",
 *  configName:"default"
 * };
 * ```
 *
 * @example
 * ```ts
 * //Configuration audio channel with external outbound sip
 * let audioConfig = {
 *  type: "sip",
 *  outbound: {
 *   server: "dasha-ai-3.pstn.us1.twilio.com",
 *   domain: "dasha-ai-3.pstn.us1.twilio.com",
 *   account: "default",
 *   password: "password"
 *  }
 * };
 * ```
 * @todo: add link
 */
export declare type AudioChannelConfig = AudioChannelSipConfigName | AudioChannelSipInboundConfig | AudioChannelSipOutboundConfig | (AudioChannelSipInboundConfig & AudioChannelSipOutboundConfig);
export declare type AudioChannelSipConfigName = {
    type: "sip";
    /**
     * Name of predefault config for sip.
     *
     * @default "default"
     */
    configName: string;
};
export declare type AudioChannelSipInboundConfig = {
    type: "sip";
    /**
     * Incoming telephony configuration.
     * Call will be expected on "account@your_customer_id.sip.dasha.ai".
     */
    inbound: {
        /**
         * Account username.
         *
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter user.
         */
        account: string;
        /**
         * Account password.
         *
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter password.
         */
        password?: string;
        /**
         * List of ip addresses and ip addresses with a mask with which you can work.
         */
        ipAcl: string[];
        /**
         * How quickly will the incoming job be processed in the job queue.
         * The job with the higher value will be processed earlier.
         * An integer from 0 to 7.
         */
        priority: number;
    };
};
export declare type AudioChannelSipOutboundConfig = {
    type: "sip";
    /**
     * Outgoing telephony configuration.
     */
    outbound: {
        /**
         * Remote sip server
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter hostport.
         */
        server: string;
        /**
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter host.
         */
        domain?: string;
        /**
         * Account username.
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter user.
         */
        account: string;
        /**
         * Account password.
         *
         * @see {@link https://tools.ietf.org/html/rfc3261#section-25.1} parameter password.
         */
        password?: string;
        /**
         * SIP connection transport
         *
         * @default "udp"
         */
        transport?: "tcp" | "udp";
        /**
         * Register on the server.
         *
         * @default false
         */
        register?: boolean;
        /**
         * Re-registration period in seconds.
         */
        registerRefresh?: number;
    };
};
/**
 * Configuration of used conversion from audio channel to text representation.
 *
 * @example
 * ```ts
 * let speechToTextConfig = {
 *   configName: "Default"
 * }
 * ```
 * @todo: add link
 */
export declare type SpeechToTextConfig = {
    configName: string;
};
/**
 * The configuration of the text-to-audio conversion to use.
 *
 * @remarks There are two distinct types: synthesis and prerecorded.
 *
 * @example
 * ```ts
 * //default synthesized
 * let ttsConfig = {
 *  type: "synthesized",
 *  configName: "Default"
 * }
 * ```
 *
 * @remarks prerecorded audio not implemented.
 *
 * @todo: add link
 */
export declare type TextToSpeechConfig = VoiceConfig & ({
    type: "synthesized";
    configName: string;
} | {
    type: "prerecorded";
    contentFile: string;
});
/**
 * Voice activity detection configuration.
 *
 * @example
 * ```ts
 * let vadConfig = {
 *  delayAtStartup: 1.0,
 *  interlocutorPauseDelay: 0.8
 * }
 * ```
 *
 * @todo: add link
 */
export declare type VoiceActivityDetectionConfig = {
    /**
     * Delay in seconds between executing the #connect method and starting of Voice Activity Detector.
     *
     * It is necessary for the correct processing of the audio channel, due to the lack of data
     * in the beginning of the audio track.
     *
     * @default 1.0
     */
    delayAtStartup?: number;
    /**
     * Length of expected pause in seconds at the end of human speech.
     *
     * Too big of a value will lead to long pauses before answer.
     * Too small of a value will lead to errors in speech recognition.
     *
     * @default 0.8
     */
    interlocutorPauseDelay?: number;
};
/**
 * @remarks
 * The fields depend on the selected way of pronouncing the text.
 * @todo: add link
 */
export declare type VoiceConfig = Partial<VoiceInfo>;
