"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupSettingsManager = void 0;
const querystring = __importStar(require("querystring"));
const axios_1 = __importDefault(require("axios"));
const errors_1 = require("./errors");
const logger = __importStar(require("./logger"));
class GroupSettingsManager {
    constructor(options) {
        // TODO: optimize work with the Rest API #732
        this._client = axios_1.default.create({
            baseURL: (options.insecure ? "http://" : "https://") + options.server,
            headers: {
                Authorization: `Bearer ${options.apiKey}`,
                "Content-Type": "application/json",
            },
            paramsSerializer: querystring.stringify,
            responseType: "json",
        });
        this._client.interceptors.response.use(undefined, (error) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const validationErrors = (_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.errors;
            if (validationErrors) {
                const messages = Object.values(validationErrors).flat().join(" ");
                return Promise.reject(new errors_1.DashaSdkError(messages, error));
            }
            const errorDetails = (_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.details;
            if (errorDetails) {
                return Promise.reject(new errors_1.DashaSdkError(errorDetails, error));
            }
            const errorReason = (_f = (_e = error.response) === null || _e === void 0 ? void 0 : _e.data) === null || _f === void 0 ? void 0 : _f.reason;
            if (errorReason) {
                return Promise.reject(new errors_1.DashaSdkError(errorReason, error));
            }
            const statusText = (_g = error.response) === null || _g === void 0 ? void 0 : _g.statusText;
            if (statusText) {
                return Promise.reject(new errors_1.DashaSdkError(statusText, error));
            }
            return Promise.reject(new errors_1.DashaSdkError(error.message, error));
        });
    }
    async _postGroup(body) {
        return (await this._client.post("/api/v1/group", body)).data;
    }
    async _deleteGroup(id) {
        await this._client.delete(`/api/v1/group/${id}`);
    }
    async _patchGroup(id, body) {
        return (await this._client.patch(`/api/v1/group/${id}`, body)).data;
    }
    async _getGroups() {
        return (await this._client.get("/api/v1/group")).data;
    }
    async _findGroup(name) {
        const groups = await this._getGroups();
        const group = groups.find((x) => x.name === name);
        if (group === undefined) {
            throw new errors_1.DashaSdkError(`group not found: '${name}'`);
        }
        return group;
    }
    async create(name, options = {}) {
        return logger.catchErrorsAsync(logger.create(), async () => {
            const { description, maxConcurrency } = options;
            await this._postGroup({ name, description, maxConcurrency });
        });
    }
    async delete(name) {
        return logger.catchErrorsAsync(logger.create(), async () => {
            const groupToDelete = await this._findGroup(name);
            await this._deleteGroup(groupToDelete.id);
        });
    }
    async update(name, options) {
        return logger.catchErrorsAsync(logger.create(), async () => {
            const groupToPatch = await this._findGroup(name);
            await this._patchGroup(groupToPatch.id, options);
        });
    }
    async list() {
        return logger.catchErrorsAsync(logger.create(), async () => {
            const groups = await this._getGroups();
            return groups.map((x) => {
                var _a, _b;
                return ({
                    id: x.id,
                    name: x.name,
                    description: (_a = x.description) !== null && _a !== void 0 ? _a : undefined,
                    maxConcurrency: (_b = x.maxConcurrency) !== null && _b !== void 0 ? _b : undefined,
                    isDefaultGroup: x.isDefaultGroup,
                });
            });
        });
    }
}
exports.GroupSettingsManager = GroupSettingsManager;
//# sourceMappingURL=group-settings.js.map