"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashaSdkError = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
class DashaSdkError extends Error {
    constructor(message, reason) {
        super(message);
        this._brand = DashaSdkError._brand;
        this.reason = reason;
    }
    static assertUint32(value, message) {
        if (Number.isSafeInteger(value) && value >= 0 && value <= 0xffffffff)
            return;
        throw new DashaSdkError(message);
    }
    static fromGrpcServiceError(error) {
        if (error.code === grpc.status.INTERNAL && error.details === "Received RST_STREAM with code 2") {
            // most often caused by trying to access a URL listened by an HTTP server
            return new DashaSdkError(`GRPC service error. Is the API URL correct?`, error);
        }
        if (error.code === grpc.status.UNAUTHENTICATED) {
            return new DashaSdkError(`Unauthenticated. Is the security token correct?`, error);
        }
        return new DashaSdkError(`GRPC service error: ${error}`, error);
    }
}
exports.DashaSdkError = DashaSdkError;
DashaSdkError._brand = Symbol();
//# sourceMappingURL=errors.js.map