"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.catchErrorsAsync = exports.catchErrors = exports.create = exports.configure = void 0;
const winston = __importStar(require("winston"));
const winston_transport_sentry_node_1 = __importDefault(require("winston-transport-sentry-node"));
let logger;
function configure(options) {
    var _a, _b;
    logger = (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.child({})) !== null && _b !== void 0 ? _b : winston.createLogger();
    if (options.logLevel !== undefined) {
        logger.configure({ level: options.logLevel });
    }
    else {
        logger.configure({ silent: true });
    }
    logger.add(new winston.transports.Console({
        format: winston.format.combine(winston.format.errors(), winston.format.colorize(), winston.format.printf(({ level, message }) => `[${level}]: ${message}`)),
    }));
    if (options.sendErrorReports) {
        logger.add(new winston_transport_sentry_node_1.default({
            level: "warn",
            sentry: { dsn: "https://d59ab8bd2df644049e9c0520fc79ca91@sentry.dev.az.dasha.ai/28" },
            format: winston.format.errors({ stack: true }),
        }));
    }
}
exports.configure = configure;
configure({ sendErrorReports: false, logLevel: "info" });
function create(defaultMeta) {
    // eslint-disable-next-line @typescript-eslint/ban-types
    return logger.child(defaultMeta);
}
exports.create = create;
function catchErrors(log, fn) {
    try {
        return fn(log);
    }
    catch (error) {
        log.error(error);
        throw error;
    }
}
exports.catchErrors = catchErrors;
async function catchErrorsAsync(log, fn) {
    try {
        return await fn(log);
    }
    catch (error) {
        log.error(error);
        throw error;
    }
}
exports.catchErrorsAsync = catchErrorsAsync;
//# sourceMappingURL=logger.js.map