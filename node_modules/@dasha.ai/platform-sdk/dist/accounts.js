"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startTrial = exports.authorize = exports.getCurrentAccountInfo = exports.setCurrentAccountName = exports.getCurrentAccountName = exports.removeAccount = exports.renameAccount = exports.setAccountInfo = exports.getAccountInfo = exports.getAccounts = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const querystring_1 = __importDefault(require("querystring"));
const axios_1 = __importDefault(require("axios"));
const env_paths_1 = __importDefault(require("env-paths"));
const openid = __importStar(require("openid-client"));
const co_body_1 = __importDefault(require("co-body"));
const logger = __importStar(require("./logger"));
const dashaEnvPaths = env_paths_1.default("dasha.ai", { suffix: "" });
const defaultAccountConfig = {
    accounts: {},
};
async function readAccountConfig(options) {
    var _a;
    const configFilePath = path_1.default.join((_a = options === null || options === void 0 ? void 0 : options.configDir) !== null && _a !== void 0 ? _a : dashaEnvPaths.config, "accounts.json");
    // TODO: consider browser usage
    try {
        return JSON.parse(await fs_1.default.promises.readFile(configFilePath, { encoding: "utf-8" }));
    }
    catch (error) {
        if (error.code === "ENOENT") {
            await writeAccountConfig(defaultAccountConfig, options);
            return defaultAccountConfig;
        }
        throw error;
    }
}
async function writeAccountConfig(config, options) {
    var _a;
    const configDir = (_a = options === null || options === void 0 ? void 0 : options.configDir) !== null && _a !== void 0 ? _a : dashaEnvPaths.config;
    await fs_1.default.promises.mkdir(configDir, { recursive: true });
    const configFilePath = path_1.default.join(configDir, "accounts.json");
    await fs_1.default.promises.writeFile(configFilePath, JSON.stringify(config), { encoding: "utf-8" });
}
/**
 * Get all stored accounts.
 *
 * @param options.configDir overrides the config file location
 */
async function getAccounts(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        return config.accounts;
    });
}
exports.getAccounts = getAccounts;
/**
 * Get stored information for a specific account. Throws an error if no account was found.
 *
 * @param accountName which account to get the info for
 * @param options.configDir overrides the config file location
 */
async function getAccountInfo(accountName, options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        if (!(accountName in config.accounts)) {
            throw new Error(`account not found: ${accountName}`);
        }
        return config.accounts[accountName];
    });
}
exports.getAccountInfo = getAccountInfo;
/**
 * Store the information for a specific account.
 *
 * @param accountName which account to set the info for
 * @param info the info to store
 * @param options.overwrite whether to throw an error if the account already exists
 * @param options.configDir overrides the config file location
 */
async function setAccountInfo(accountName, info, options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        if (!(options === null || options === void 0 ? void 0 : options.overwrite) && accountName in config.accounts) {
            throw new Error(`account already exists: ${accountName}`);
        }
        config.accounts[accountName] = info;
        await writeAccountConfig(config, options);
    });
}
exports.setAccountInfo = setAccountInfo;
/**
 * Rename a stored account.
 *
 * @param oldAccountName the account to rename
 * @param newAccountName new account name
 * @param options.overwrite whether to throw an error on name conflict
 * @param options.configDir overrides the config file location
 */
async function renameAccount(oldAccountName, newAccountName, options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        if (!(oldAccountName in config.accounts)) {
            throw new Error(`account not found: ${oldAccountName}`);
        }
        if (!(options === null || options === void 0 ? void 0 : options.overwrite) && newAccountName in config.accounts) {
            throw new Error(`account already exists: ${newAccountName}`);
        }
        config.accounts[newAccountName] = config.accounts[oldAccountName];
        delete config.accounts[oldAccountName];
        if (config.currentAccount === oldAccountName) {
            config.currentAccount = newAccountName;
        }
        await writeAccountConfig(config, options);
    });
}
exports.renameAccount = renameAccount;
/**
 * Remove a stored account.
 *
 * @param accountName the account to remove
 * @param options.quiet whether to throw an error if the account does not exist
 * @param options.configDir overrides the config file location
 */
async function removeAccount(accountName, options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        if (!(options === null || options === void 0 ? void 0 : options.quiet) && !(accountName in config.accounts)) {
            throw new Error(`account not found: ${accountName}`);
        }
        delete config.accounts[accountName];
        if (config.currentAccount === accountName) {
            delete config.currentAccount;
        }
        await writeAccountConfig(config, options);
    });
}
exports.removeAccount = removeAccount;
/**
 * Get the name of an account that is set as current, or `undefined` if no current account is set.
 *
 * @param options.configDir overrides the config file location
 */
async function getCurrentAccountName(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        return config.currentAccount;
    });
}
exports.getCurrentAccountName = getCurrentAccountName;
/**
 * Set a specific stored account as current. Throws an error if no account with such name exists.
 *
 * @param accountName the account to set as current
 * @param options.configDir overrides the config file location
 */
async function setCurrentAccountName(accountName, options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const config = await readAccountConfig(options);
        if (accountName !== undefined && !(accountName in config.accounts)) {
            throw new Error(`account not found: ${accountName}`);
        }
        config.currentAccount = accountName;
        await writeAccountConfig(config, options);
    });
}
exports.setCurrentAccountName = setCurrentAccountName;
/**
 * Get stored information for the account set as current. Throws an error if there is no current account.
 *
 * @param options.configDir overrides the config file location
 */
async function getCurrentAccountInfo(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const name = await getCurrentAccountName(options);
        if (name === undefined) {
            throw new Error(`no account is set as current`);
        }
        return await getAccountInfo(name, options);
    });
}
exports.getCurrentAccountInfo = getCurrentAccountInfo;
async function getAuthServerUrl(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const baseUrl = (options.insecure ? "http://" : "https://") + options.server;
        const response = await axios_1.default(`${baseUrl}/api/v1/misc/authServer`);
        return await response.data;
    });
}
async function authorize(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const { server, insecure, redirectUri, responseType, callback } = options;
        const authServerUrl = await getAuthServerUrl({ server, insecure });
        const issuer = await openid.Issuer.discover(authServerUrl);
        const client = new issuer.Client({ client_id: "platform_client" });
        const nonce = openid.generators.nonce();
        const authUrl = client.authorizationUrl({
            scope: "platform_api",
            response_type: "token",
            redirect_uri: redirectUri,
            prompt: "login",
            response_mode: responseType === "form" ? "form_post" : undefined,
            nonce,
        });
        const callbackResult = await callback(authUrl);
        let parameters = {};
        if (responseType === "form" && typeof callbackResult !== "string") {
            parameters = await co_body_1.default.form(callbackResult);
        }
        if (responseType === "fragment" && typeof callbackResult === "string") {
            parameters = querystring_1.default.parse(callbackResult.slice(1));
        }
        const tokenSet = await client.callback(redirectUri, parameters, { response_type: "token", nonce });
        return {
            server,
            insecure: insecure || undefined,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            apiKey: tokenSet.access_token,
        };
    });
}
exports.authorize = authorize;
async function startTrial(options) {
    return logger.catchErrorsAsync(logger.create(), async () => {
        const { server, insecure } = options;
        const authServerUrl = await getAuthServerUrl({ server, insecure });
        const response = await axios_1.default(`${authServerUrl}/api/account/trial`);
        return {
            server,
            insecure: insecure || undefined,
            apiKey: response.data.accessToken,
        };
    });
}
exports.startTrial = startTrial;
//# sourceMappingURL=accounts.js.map