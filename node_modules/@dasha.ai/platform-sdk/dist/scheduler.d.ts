import { IJobDescription } from "./sdk";
export declare type OneOrMany<T> = T | T[];
/**
 * ISO 8601 date (YYYY-MM-DD).
 *
 * If time and/or a timezone is specified, they are ignored (use `hours()` and `timezone()` instead).
 * */
export declare type IsoDate = string;
/**
 * An inclusive range of dates.
 */
export declare type DateRange = {
    from: IsoDate;
    to: IsoDate;
};
/**
 * An inclusive range between two ISO times (HH:MM or HH:MM:SS).
 *
 * Can wrap around midnight (e.g. 22:00 - 02:00).
 */
export declare type HourRange = {
    from: string;
    to: string;
};
/**
 * A timezone identifier.
 *
 * As a string, that can be any IANA zone supported by the host environment,
 * or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'.
 *
 * As a number, it will be interpreted as a UTC offset in minutes.
 */
export declare type Timezone = string | number;
export interface ScheduleOptions {
    /**
     * Schedule jobs no earlier that this moment in time.
     *
     * If not specified, the job is scheduled at the earliest time possible.
     */
    after?: Date;
}
/**
 * A scheduler to augment job data with the {@link IJobDescription.notBefore}
 * and {@link IJobDescription.notAfter} attributes according to set rules.
 *
 * @example
 * const scheduler = new Scheduler()
 *   .dates({ from: "2020-09-01", to: "2020-09-20" })
 *   .hours({ from: "20:00", to: "22:00" })
 *   .timezone(data => data.tz);
 *
 * application.enqueueJobs([scheduler.schedule(jobData)]);
 */
export default class Scheduler<TJobData extends Omit<IJobDescription, "notBefore" | "notAfter">> {
    private _dates?;
    private _hours?;
    private _timezone?;
    /**
     * Set up dates to schedule jobs on.
     *
     * @param dates Dates or date ranges
     */
    dates(...dates: (IsoDate | DateRange)[]): this;
    /**
     * Set up dates to schedule jobs on.
     *
     * @param cb A callback to extract dates from the job data
     */
    dates(cb: (date: TJobData) => OneOrMany<IsoDate | DateRange>): this;
    /**
     * Sets the hour ranges for jobs.
     *
     * @param hours Hour ranges
     */
    hours(...hours: HourRange[]): this;
    /**
     * Sets the hour ranges for jobs.
     *
     * @param cb A callback to extract hours from the job data and scheduled date.
     *
     * @remarks
     * A callback can return an empty range to exclude a specific date from the schedule.
     *
     * @example
     * // exclude weekends
     * scheduler.hours((_, date) => isWeekend(date) ? [] : { from: "20:00", to: "22:00" })
     */
    hours(cb: (data: TJobData, date: IsoDate) => OneOrMany<HourRange>): this;
    /**
     * Sets the timezone for all dates and times in the current schedule.
     *
     * If not set, defaults to UTC.
     *
     * @param tz Timezone specifier
     */
    timezone(tz: Timezone): this;
    /**
     * Sets the timezone for all dates and times in the current schedule.
     *
     * If not set, defaults to UTC.
     *
     * @param cb A callback to extract the timezone from job data
     */
    timezone(cb: (data: TJobData) => Timezone): this;
    /**
     * Find the next available time interval for a job.
     *
     * @param data Job data
     * @param options Additional options
     *
     * @returns A job description to pass to {@link Application.enqueueJobs}
     */
    schedule(data: TJobData, options?: ScheduleOptions): IJobDescription;
}
