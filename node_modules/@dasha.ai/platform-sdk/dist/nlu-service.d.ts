import * as rxjs from "rxjs";
export interface IntentRecognition {
    /**
     * Discriminator field
     */
    type: "intent";
    /**
     * The name of the intent.
     * @remarks
     * If undefined, then the intent expresses the positive or negative meaning of the text
     */
    intent?: string;
    /**
     * Reflects in which key the intent was extracted.
     * Intention can be learned in negative or positive form.
     */
    state: string;
    /**
     * The type of sentence in which this intent was extracted.
     * For example, in an affirmative(statement) sentence or in an interrogative(question) sentence, etc.
     */
    sentenceType: string;
    /**
     * The skill that chose this intent.
     */
    skill: string;
}
export interface DataRecognition {
    type: "data";
    /**
     * Data that has been recognized.
     */
    data: {
        [key: string]: string;
    };
    /**
     * The type of data that this recognition represents.
     */
    dataName: string;
    /**
     * Skill which can extracting this type of data.
     */
    skill: string;
}
export declare type Recognition = IntentRecognition | DataRecognition;
export interface INluService {
    recognize(skills: string[], language: string, text: string): Promise<Recognition[] | undefined>;
    close(): void;
    readonly closed: boolean;
    readonly information: NluServiceInformation;
}
export interface CustomIntents {
    includes: Record<string, string[]>;
    excludes: Record<string, string[]>;
    language: string;
}
export interface NluServiceInformation {
    skillId?: string;
}
export interface INluServiceCreationRequest {
    readonly progressPercent: rxjs.Observable<number>;
    readonly result: Promise<INluService>;
}
